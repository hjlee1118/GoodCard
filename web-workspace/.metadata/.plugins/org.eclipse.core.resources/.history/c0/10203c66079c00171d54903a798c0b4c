package kr.co.goodcard.controller;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.bson.types.ObjectId;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.MongoClient;

import kr.co.goodcard.vo.CreditCard;
import kr.co.goodcard.vo.MyCardSearchOption;
import kr.co.goodcard.vo.mongo.*;

@Controller
public class CardController {
	
	private static final String[] CREDIT_CARD_LIST = {"하나카드", "국민카드", "신한카드", "비씨카드", "삼성카드", "롯데카드",	"현대카드", "우리카드", 
			"농협카드", "기업카드", "씨티카드", "스탠다드차타드카드", "부산은행", "광주은행", "대구은행", "경남은행", "전북은행", "제주은행",	"수협은행", "기타카드"};
	
	private static final String[] CHECK_CARD_LIST = {"하나카드","국민카드","신한카드","삼성카드","롯데카드","현대카드","우리카드","농협카드", "기업카드","씨티카드",
			"스탠다드차타드카드","부산은행","광주은행","대구은행","경남은행","전북은행","제주은행","수협은행","신협은행","새마을금고","산업은행","우체국카드","케이뱅크",
			"웰컴저축은행","KB증권","유안타증권","동부증권","유진투자증권"};


	/**
	 * 신용카드의 요청을 처리
	 */

	@RequestMapping("credit.do")
	public String creditCardPageTest(@RequestParam("pageNo") int no, Model model) {
		try {
			BasicDBObject searchQuery = new BasicDBObject();
			searchQuery.put("brand", "하나카드");

			int totalCnt = creditCardCnt(searchQuery);
			int totalPageCnt = 0;

			if (totalCnt % 10 == 0) {
				totalPageCnt = totalCnt / 10;
			} else {
				totalPageCnt = totalCnt / 10 + 1;
			}

			List<CreditCard> creditCardList = cardList(searchQuery, no);
			model.addAttribute("creditCardList", creditCardList);
			model.addAttribute("totalCnt", totalCnt);
			model.addAttribute("totalPageCnt", totalPageCnt);
			return "credit/list";
		} catch (Exception e) {

		}
		return "redirect:/";
	}

	@RequestMapping("credit/detail.do")
	public String creditCardDetail(@RequestParam("id") String id, Model model) {
		CreditCard creditCard = new CreditCard();
		try {
			BasicDBObject searchQuery = new BasicDBObject();
			searchQuery.put("_id", new ObjectId(id));
			creditCard = cardDetail(searchQuery);
			model.addAttribute("card", creditCard);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "credit/detail";

	}

	public static int creditCardCnt(BasicDBObject searchQuery) {
		MongoClient mongo = new MongoClient("52.79.221.214", 27017);
		DB db = mongo.getDB("hana");

		DBCollection collection = db.getCollection("creditCard");

		int count = collection.find(searchQuery).count();

		return count;
	}

	public static CreditCard cardDetail(BasicDBObject searchQuery) {

		MongoClient mongo = new MongoClient("52.79.221.214", 27017);
		DB db = mongo.getDB("hana");

		// get a single collection
		DBCollection collection = db.getCollection("creditCard");
		BasicDBObject cardDBObject = (BasicDBObject) collection.findOne(searchQuery);
		CreditCard creditCard = new CreditCard();

		creditCard.setId(cardDBObject.getString("_id"));
		creditCard.setBrand(cardDBObject.getString("brand"));
		creditCard.setCardType(cardDBObject.getString("cardType"));
		creditCard.setCardName(cardDBObject.getString("cardName"));
		creditCard.setAnnotation(cardDBObject.getString("annotation"));
		File imagePath = new File(cardDBObject.getString("imagePath"));
		creditCard.setImagePath(imagePath.getName());
		creditCard.setViewCount(cardDBObject.getInt("viewCount"));

		// annualFee
		try {
			List<AnnualFee> annualFees = new ArrayList<AnnualFee>();
			BasicDBList annualFeeList = (BasicDBList) cardDBObject.get("annualFee");

			for (int i = 0; i < annualFeeList.size(); i++) {
				BasicDBObject annualFeeObj = (BasicDBObject) annualFeeList.get(i);
				String brand = annualFeeObj.getString("brand");
				int fee = annualFeeObj.getInt("fee");

				AnnualFee annualFee = new AnnualFee();
				annualFee.setBrand(brand);
				annualFee.setFee(fee);

				annualFees.add(annualFee);
			}

			creditCard.setAnnualFee(annualFees);
		} catch (Exception e) {

		}

		// limitBenefit
		try {
			List<LimitBenefit> limitBenefits = new ArrayList<LimitBenefit>();
			BasicDBList limitBenefitList = (BasicDBList) cardDBObject.get("limitBenefit");

			for (int i = 0; i < limitBenefitList.size(); i++) {

				BasicDBObject limitBenefitObj = (BasicDBObject) limitBenefitList.get(i);
				int prevPerformance = limitBenefitObj.getInt("prevPerformance");
				int maxBenefit = limitBenefitObj.getInt("maxBenefit");

				LimitBenefit limitBenefit = new LimitBenefit();
				limitBenefit.setPrevPerformance(prevPerformance);
				limitBenefit.setMaxBenefit(maxBenefit);

				limitBenefits.add(limitBenefit);

			}

			creditCard.setLimitBenefit(limitBenefits);

		} catch (Exception e) {

		}

		try {

			// SpecialService
			List<SpecialService> specialServices = new ArrayList<SpecialService>();
			BasicDBList specialServiceList = (BasicDBList) cardDBObject.get("specialService");

			for (int i = 0; i < specialServiceList.size(); i++) {

				BasicDBObject specialServiceObj = (BasicDBObject) specialServiceList.get(i);
				String category = specialServiceObj.getString("category");

				List<Detail> details = new ArrayList<Detail>();
				BasicDBList detailList = (BasicDBList) specialServiceObj.get("detail");

				SpecialService specialService = new SpecialService();
				specialService.setCategory(category);
				try {
					for (int j = 0; j < detailList.size(); j++) {
						BasicDBObject detailObj = (BasicDBObject) detailList.get(j);
						String detailCategory = detailObj.getString("detailCategory");

						Detail detail = new Detail();
						detail.setDetailCategory(detailCategory);

						try {
							List<ServiceList> serviceLists = new ArrayList<ServiceList>();
							BasicDBList serviceListList = (BasicDBList) detailObj.get("serviceList");

							for (int k = 0; k < serviceListList.size(); k++) {
								BasicDBObject serviceListObj = (BasicDBObject) serviceListList.get(k);
								String service = serviceListObj.getString("service");
								String content = serviceListObj.getString("content");

								ServiceList serviceList = new ServiceList();
								serviceList.setService(service);
								serviceList.setContent(content);

								serviceLists.add(serviceList);
							}
							detail.setServiceList(serviceLists);
						} catch (Exception e) {
						}

						details.add(detail);

					}

					specialService.setDetail(details);

				} catch (Exception e) {

				}

				specialServices.add(specialService);

			}

			creditCard.setSpecialServices(specialServices);

		} catch (Exception e) {
		}

		// Benefit
		try {
			List<Benefits> benefitss = new ArrayList<Benefits>();
			BasicDBList benefitsList = (BasicDBList) cardDBObject.get("benefits");

			for (int i = 0; i < benefitsList.size(); i++) {

				BasicDBObject benefitsObj = (BasicDBObject) benefitsList.get(i);
				String benefitsCategory = benefitsObj.getString("category");

				try {
					List<BrandList> brandLists = new ArrayList<BrandList>();
					BasicDBList brandListList = (BasicDBList) benefitsObj.get("brandList");

					Benefits benefits = new Benefits();
					benefits.setCategory(benefitsCategory);

					for (int j = 0; j < brandListList.size(); j++) {
						BasicDBObject brandListObj = (BasicDBObject) brandListList.get(j);
						String brand = brandListObj.getString("brand");
						String benefitBenefit = brandListObj.getString("benefit");
						int benefitPrevperformance = brandListObj.getInt("prevPerformance");
						String constraint = brandListObj.getString("constraint");

						BrandList brandList = new BrandList();
						brandList.setBrand(brand);
						brandList.setBenefit(benefitBenefit);
						brandList.setPrevPerformance(benefitPrevperformance);
						brandList.setConstraint(constraint);

						brandLists.add(brandList);
					}

					benefits.setBrandList(brandLists);

					benefitss.add(benefits);

				} catch (Exception e) {
				}

			}

			creditCard.setBenefits(benefitss);
		} catch (Exception e) {
		}

		creditCard.setHomepageURL("https://www.hanacard.co.kr/");

		System.out.println(creditCard);

		mongo.close();

		return creditCard;

	}

	public static List<CreditCard> cardList(BasicDBObject searchQuery, int pageNo) {
		try {
			MongoClient mongo = new MongoClient("52.79.221.214", 27017);
			DB db = mongo.getDB("hana");

			// get a single collection
			DBCollection collection = db.getCollection("creditCard");
			int skipPage = (pageNo - 1) * 10;
			DBCursor cursor = collection.find(searchQuery).skip(skipPage).limit(10);

			List<CreditCard> list = new ArrayList<>();

			while (cursor.hasNext()) {

				BasicDBObject cardDBObject = (BasicDBObject) cursor.next();
				CreditCard creditCard = new CreditCard();

				creditCard.setId(cardDBObject.getString("_id"));
				creditCard.setBrand(cardDBObject.getString("brand"));
				creditCard.setCardType(cardDBObject.getString("cardType"));
				creditCard.setCardName(cardDBObject.getString("cardName"));
				creditCard.setAnnotation(cardDBObject.getString("annotation"));
				File imagePath = new File(cardDBObject.getString("imagePath"));
				creditCard.setImagePath(imagePath.getName());

				creditCard.setAnnualFee((List<AnnualFee>) cardDBObject.get("annualFee"));
				creditCard.setLimitBenefit((List<LimitBenefit>) cardDBObject.get("limitBenefit"));
				creditCard.setSpecialServices((List<SpecialService>) cardDBObject.get("specialService"));
				creditCard.setBenefits((List<Benefits>) cardDBObject.get("benefits"));

				creditCard.setViewCount(cardDBObject.getInt("viewCount"));
				creditCard.setHomepageURL("https://www.hanacard.co.kr/");

				list.add(creditCard);
			}

			System.out.println(list.get(0));
			mongo.close();

			return list;

		} catch (Exception e) {

		}
		return null;

	}
	
	@RequestMapping(value="mycard/search.do")
	public List<CreditCard> searchMyCard(MyCardSearchOption searchOption){
		
		MongoClient mongo = new MongoClient("52.79.221.214", 27017);
		DB db = mongo.getDB("hana");

		String cardType = searchOption.getCardType();
		String searchType = searchOption.getSearchType();
		

		BasicDBObject searchQuery = new BasicDBObject();
		
		//creditCard
		if(cardType.equals("creditCard")){
			
			// get a single collection
			DBCollection collection = db.getCollection("creditCard");
			
			if(searchType.equals("brand")){
				int brand = searchOption.getCreditCardBrand();
				String searchBrand = CREDIT_CARD_LIST[brand];
				searchQuery.put("brand", searchBrand);
			}
			else{
				String searchInput = searchOption.getMyCardsearchInput();
				searchQuery.put("cardName", java.util.regex.Pattern.compile(searchInput));
				
			}
		}		
		else{
			
			// get a single collection
			DBCollection collection = db.getCollection("checkCard");
			
			if(searchType.equals("brand")){
				int brand = searchOption.getCheckCardBrand();
				String searchBrand = CHECK_CARD_LIST[brand];
				searchQuery.put("brand", searchBrand);
			}
			else{
				String searchInput = searchOption.getMyCardsearchInput();
				searchQuery.put("cardName", java.util.regex.Pattern.compile(searchInput));
			}
		}		
		
		
		return null;
	}

}
